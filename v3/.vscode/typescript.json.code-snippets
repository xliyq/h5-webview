{
  // Place your HBSJ_INQUIRY2_WEB workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  // 创建enum文件
  "createEnum": {
    "prefix": "newEnum",
    "body": [
      "enum ${TM_FILENAME_BASE} {",
      "UNKNOW,",
      "$1",
      "};",
      "",
      "namespace ${TM_FILENAME_BASE} {",
      "export function toString(value: ${TM_FILENAME_BASE}){",
      "switch (value) {",
      "case ${TM_FILENAME_BASE}.UNKNOW:",
      "return '通过';",
      "default:",
      "return '';",
      "}",
      "}",
      "}",
      "export default ${TM_FILENAME_BASE};"
    ],
    "description": "创建Enum"
  },
  "createComponent": {
    "prefix": "newCom",
    "body": [
      "import React, { Component, ReactNode } from 'react';",
      "import IComponentProps from '@/base/interfaces/IComponentProps';",
      "",
      "interface I${TM_FILENAME_BASE}State {",
      "",
      "}",
      "interface I${TM_FILENAME_BASE}Props extends IComponentProps {",
      "",
      "}",
      "",
      "class ${TM_FILENAME_BASE} extends Component<I${TM_FILENAME_BASE}Props, I${TM_FILENAME_BASE}State> {",
      "public render():ReactNode {",
      "return (",
      "<div>",
      "${TM_FILENAME_BASE}",
      "</div>",
      ");",
      "}",
      "}",
      "",
      "export default ${TM_FILENAME_BASE};"
    ],
    "description": "创建组件"
  },
  "createPage": {
    "prefix": "newPage",
    "body": [
      "import React, { Component, ReactNode } from 'react';",
      "import IPageProps from '@/base/interfaces/IPageProps';",
      "",
      "interface I${TM_FILENAME_BASE}Sate { }",
      "",
      "class ${TM_FILENAME_BASE} extends Component<IPageProps, I${TM_FILENAME_BASE}Sate> {",
      "public render(): ReactNode {",
      "return (",
      "<div>",
      "${TM_FILENAME_BASE}",
      "</div>",
      ");",
      "}",
      "}",
      "",
      "export default ${TM_FILENAME_BASE};"
    ],
    "description": "创建组件"
  },
  "createInterface": {
    "prefix": "newInterface",
    "body": [
      "export default interface ${TM_FILENAME_BASE} {",
      "  id: string;",
      "}"
    ],
    "description": "创建接口"
  },
  "createService": {
    "prefix": "newService",
    "body": [
      "import FHRequest from '@/utils/FHRequest';",
      "",
      "/**",
      "* ${TM_FILENAME_BASE}",
      "*/",
      "class ${TM_FILENAME_BASE} extends FHRequest<$1> {",
      "constructor() {",
      "super('$2');",
      "}",
      "}",
      "export default ${TM_FILENAME_BASE};"
    ],
    "description": "创建网络层"
  },
}